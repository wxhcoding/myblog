import{_ as l,r as o,o as c,c as r,d as n,a,w as t,b as s,e as i}from"./app-1lTnJ-Z-.js";const u={},d=n("h1",{id:"redis基础",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis基础","aria-hidden":"true"},"#"),s(" Redis基础")],-1),k={class:"table-of-contents"},m=i('<h2 id="redis简单介绍" tabindex="-1"><a class="header-anchor" href="#redis简单介绍" aria-hidden="true">#</a> Redis简单介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-29-23-44-48.png" alt="redis_basic"><br><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-29-23-45-28.png" alt="nosql_sql"></p><h3 id="特征" tabindex="-1"><a class="header-anchor" href="#特征" aria-hidden="true">#</a> 特征</h3><ul><li>键值 (key-value)型，value支持多种不同数据结构，功能丰富单线程，每个命令具备原子性</li><li>低延迟，速度快(基于内存、10多路复用、良好的编码)</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><h2 id="redis安装" tabindex="-1"><a class="header-anchor" href="#redis安装" aria-hidden="true">#</a> Redis安装</h2><h3 id="安装linux" tabindex="-1"><a class="header-anchor" href="#安装linux" aria-hidden="true">#</a> 安装Linux</h3><blockquote><p>后面会补充上来</p></blockquote><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><p>首先输入 su 使用root用户执行命令 输入密码 123456<br> 然后执行命令，安装依赖。 <code>yum install -y gcc tcl</code><br> 安装python3 <code>yum install python3</code></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>直接到 <code>/usr/local/src</code> 操作更好。 此次操作是在 <code>/root/usr/local/src</code>下，注意区分不同。 redis默认安装在 <code>/usr/local/bin/</code>目录中，但是配置文件在解压的目录中，此次配置文件在<code>/root/usr/local/src/redis-7.0.12/redis.conf</code>中。 进入src 目录<code>cd usr/local/src</code></p></div><p>直接进入这个目录更好 <code>cd /usr/local/src</code><br> 勾选下面方框，跟随终端命令，把压缩包拖入src目录中。</p><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-29-23-58-18.png" alt="redis_tar"></p><p>在此目录进行解压 <code>tar -zxvf redis-7.0.12.tar.gz</code> 进行解压缩<br><code>cd redis-7.0.12</code> 进入安装目录<br><code>make &amp;&amp; make install</code> 进行编译安装<br> 默认安装在 <code>/usr/local/bin/</code>目录中 进入目录可以看到有文件<br><code>redis-server</code> 运行redis，启动成功。 使用Ctrl+C可以退出这个启动状态</p><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-29-23-58-45.png" alt="redis_server"></p><h3 id="配置启动" tabindex="-1"><a class="header-anchor" href="#配置启动" aria-hidden="true">#</a> 配置启动</h3><p>复制一份配置文件，以防出错。<code>cp redis.conf redis.conf.bck</code><br> 修改配置文件内容。 <code>vi redis.conf</code></p>',16),v={href:"https://blog.csdn.net/m0_56581199/article/details/122927206",target:"_blank",rel:"noopener noreferrer"},b=n("br",null,null,-1),g=n("br",null,null,-1),h=n("br",null,null,-1),f=i(`<p>修改访问ip</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#bind 127.0.0.1</span>
<span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>允许后台启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>daemonize <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置密码</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>requirepass <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置日志文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>logfile <span class="token string">&quot;redis.log&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入 <code>redis-server redis.conf</code> 启动redis<br> 输入 <code>ps -ef | grep redis</code>查询是否启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-33-42.png" alt="redis_conf_start"></p><p>输入 <code>kill -9 78374</code> 78374为随机的进程ID 杀死redis进程</p><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-34-09.png" alt="redis_kill"></p><h3 id="开机自启" tabindex="-1"><a class="header-anchor" href="#开机自启" aria-hidden="true">#</a> 开机自启</h3><p>创建文件并编辑。 <code>vi /etc/systemd/system/redis.service</code></p><blockquote><p>因为在最开始创建的时候没有在根目录下的usr目录创建，所以导致没有在一个目录。</p></blockquote><div class="custom-container warning"><p class="custom-container-title">重要</p><p>最重要的是这句<br><code>ExecStart=/usr/local/bin/redis-server /root/usr/local/src/redis-7.0.12/redis.conf</code><br><code>/usr/local/bin/redis-server</code> 这个为redis的安装目录下面的redis-server<br><code>/root/usr/local/src/redis-7.0.12/redis.conf</code> 这个为解压所在目录的配置文件，注意配置正确。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>redis-server
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>forking
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/bin/redis-server  /root/usr/local/src/redis-7.0.12/redis.conf
<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入 <code>:wq </code>保存退出。</p><div class="custom-container danger"><p class="custom-container-title">注意 对于我来说的路径</p><p>redis安装位置 <code>/usr/local/bin/redis-server</code><br> redis解压配置文件位置 <code>/root/usr/local/src/redis-7.0.12/redis.conf</code></p></div><ul><li>重启系统服务。 <code>systemctl daemon-reload</code></li><li>启动redis。 <code>systemctl start redis</code></li><li>查看redis状态。 <code>systemctl status redis.service</code></li><li>停止redis。 <code>systemctl stop redis</code></li><li>重启redis。<code>systemctl restart redis</code><br><strong>最后</strong>加入开机自启redis。 <code>systemctl enable redis</code></li></ul><h2 id="redis命令" tabindex="-1"><a class="header-anchor" href="#redis命令" aria-hidden="true">#</a> Redis命令</h2><h3 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h3><p>首先进入redis的安装目录 <code>cd /usr/local/bin</code></p><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-29-23-59-36.png" alt="redis_basic-2023-07-29-23-59-36"></p><p><code>redis-cli -h 127.0.0.1 -p 6379 -a 123456</code><br> 这样会提示不安全，用下面的方式输入密码。 <code>AUTH 123456</code></p><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-00-24.png" alt="redis_basic-2023-07-30-00-00-24"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Last login: Sat Jul <span class="token number">22</span> <span class="token number">17</span>:44:15 <span class="token number">2023</span> from <span class="token number">192.168</span>.126.1
<span class="token punctuation">[</span>root@192 ~<span class="token punctuation">]</span><span class="token comment"># ps -ef | grep redis</span>
root       <span class="token number">1111</span>      <span class="token number">1</span>  <span class="token number">0</span> <span class="token number">18</span>:08 ?        00:00:00 /usr/local/bin/redis-server <span class="token number">0.0</span>.0.0:6379
root       <span class="token number">2661</span>   <span class="token number">2528</span>  <span class="token number">0</span> <span class="token number">18</span>:10 pts/0    00:00:00 <span class="token function">grep</span> <span class="token parameter variable">--color</span><span class="token operator">=</span>auto redis
<span class="token punctuation">[</span>root@192 ~<span class="token punctuation">]</span><span class="token comment"># cd /usr/local/bin</span>
<span class="token punctuation">[</span>root@192 bin<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 127.0.0.1 -p 6379 -a 123456</span>
Warning: Using a password with <span class="token string">&#39;-a&#39;</span> or <span class="token string">&#39;-u&#39;</span> option on the <span class="token builtin class-name">command</span> line interface may not be safe.
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">ping</span>
PONG
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
<span class="token punctuation">[</span>root@192 bin<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 127.0.0.1 -p 6379</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> AUTH <span class="token number">123456</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> PING
PONG
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单操作" tabindex="-1"><a class="header-anchor" href="#简单操作" aria-hidden="true">#</a> 简单操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name tom
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> age <span class="token number">22</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name
<span class="token string">&quot;tom&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;22&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h3>`,30),q={href:"https://github.com/lework/RedisDesktopManager-Windows/releases",target:"_blank",rel:"noopener noreferrer"},y=n("br",null,null,-1),S=n("p",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-01-18.png",alt:"redis_desk_fail"})],-1),j=n("ol",null,[n("li",null,[s("开放6379端口"),n("code",null,"firewall-cmd --add-port=6379/tcp --permanent")]),n("li",null,[s("刷新防火墙"),n("code",null,"firewall-cmd --reload")])],-1),x=n("p",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-02-16.png",alt:"redis_desk_success"})],-1),_=n("h3",{id:"通用命令",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#通用命令","aria-hidden":"true"},"#"),s(" 通用命令")],-1),w={href:"https://redis.io/commands/",target:"_blank",rel:"noopener noreferrer"},R=n("code",null,"help @generic",-1),T=i(`<ul><li><code>KEYS</code> ：查询符合模板的所有key，不建议生产设备上使用</li><li><code>DEL</code> ：删除指定的key</li><li><code>EXISTS</code> ：判断key是否存在</li><li><code>EXPIRE</code> ：设置key的有效期，到期自动删除</li><li><code>TTL</code> ：查看key的剩余有效期</li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>可以按 <code>Tab</code> 补全,默认设置的key为永久有效，在设置key时最好设置有效期。</p></div><details class="custom-container details"><summary>命令演示</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> keys

KEYS pattern
summary: Find all keys matching the given pattern
since: <span class="token number">1.0</span>.0
group: generic

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> KEYS *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> del

DEL key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
summary: Delete a key
since: <span class="token number">1.0</span>.0
group: generic

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> DEL name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> KEYS *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MSET k1 v1 k2 v2 k3 v3
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> KEYS *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> DEL k1 k2 k3 k4
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> KEYS *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> exists

EXISTS key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
summary: Determine <span class="token keyword">if</span> a key exists
since: <span class="token number">1.0</span>.0
group: generic

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EXISTS name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>

<span class="token comment"># 127.0.0.1:6379&gt; help expire</span>

<span class="token comment"># EXPIRE key seconds [NX|XX|GT|LT]</span>
<span class="token comment"># summary: Set a key&#39;s time to live in seconds</span>
<span class="token comment"># since: 1.0.0</span>
<span class="token comment"># group: generic</span>

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> ttl

TTL key
summary: Get the <span class="token function">time</span> to live <span class="token keyword">for</span> a key <span class="token keyword">in</span> seconds
since: <span class="token number">1.0</span>.0
group: generic

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> KEYS *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> EXPIRE age <span class="token number">20</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> TTL age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">16</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> TTL age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">13</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> TTL age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> TTL age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> KEYS *
<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SET name tom1
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> TTL name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="redis数据结构" tabindex="-1"><a class="header-anchor" href="#redis数据结构" aria-hidden="true">#</a> Redis数据结构</h2><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-02-50.png" alt="redis_data"></p><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>String的常见命令有:</p><ul><li><code>SET</code>:添加或者修改已经存在的一个String类型的键值对</li><li><code>GET</code>:根据key获取String类型的value</li><li><code>MSET</code>:批量添加多个string类型的键值对</li><li><code>MGET</code>:根据多个key获取多个String类型的value</li></ul><details class="custom-container details"><summary>命令演示</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> <span class="token builtin class-name">set</span>

SET key value <span class="token punctuation">[</span>NX<span class="token operator">|</span>XX<span class="token punctuation">]</span> <span class="token punctuation">[</span>GET<span class="token punctuation">]</span> <span class="token punctuation">[</span>EX seconds<span class="token operator">|</span>PX milliseconds<span class="token operator">|</span>EXAT unix-time-seconds<span class="token operator">|</span>PXAT unix-time-milliseconds<span class="token operator">|</span>KEEPTTL<span class="token punctuation">]</span>
summary: Set the string value of a key
since: <span class="token number">1.0</span>.0
group: string

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> mset

MSET key value <span class="token punctuation">[</span>key value <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
summary: Set multiple keys to multiple values
since: <span class="token number">1.0</span>.1
group: string

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name rose
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name
<span class="token string">&quot;rose&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name tom
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name
<span class="token string">&quot;tom&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MSET k1 v1 k2 v3 k3 v3
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> MGET name k1 k2 k3
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;tom&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;v1&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;v3&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;v3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><code>INCR</code>:让一个整型的key自增1</li><li><code>INCRBY</code>:让一个整型的key自增并指定步长，例如:incrby num 2让num值自增2</li><li><code>INCRBYFLOAT</code>:让一个浮点类型的数字自增并指定步长</li></ul><details class="custom-container details"><summary>命令演示</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> INCR

INCR key
summary: Increment the integer value of a key by one
since: <span class="token number">1.0</span>.0
group: string

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> age <span class="token number">18</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;18&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;18&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCR age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">19</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;19&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;19&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCR age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">20</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCR age
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">21</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;21&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> INCRBY

INCRBY key increment
summary: Increment the integer value of a key by the given amount
since: <span class="token number">1.0</span>.0
group: string

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">23</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">25</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">27</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;27&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token parameter variable">-1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">26</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token parameter variable">-1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">25</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> incrby age <span class="token parameter variable">-1</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">24</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get age
<span class="token string">&quot;24&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> score <span class="token number">10.5</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCRBYFLOAT score <span class="token number">0.5</span>
<span class="token string">&quot;11&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCRBYFLOAT score <span class="token number">0.5</span>
<span class="token string">&quot;11.5&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> INCRBYFLOAT score <span class="token number">0.5</span>
<span class="token string">&quot;12&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> GET score
<span class="token string">&quot;12&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><code>SETNX</code>:添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li><code>SETEX</code>:添加一个String类型的键值对，并且指定有效期</li></ul><details class="custom-container details"><summary>命令演示</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">help</span> SETNX

SETNX key value
summary: Set the value of a key, only <span class="token keyword">if</span> the key does not exist
since: <span class="token number">1.0</span>.0
group: string

<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETNX name lisi
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name
<span class="token string">&quot;tom&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SETNX name2 lisi
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name2
<span class="token string">&quot;lisi&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name wangwu nx
<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name3 wangwu nx
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> get name3
<span class="token string">&quot;wangwu&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex name tom <span class="token number">10</span>
<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR value is not an integer or out of range
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setex name <span class="token number">10</span> tom
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-2</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;name3&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;name2&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;score&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">set</span> name tom ex <span class="token number">10</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">6</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ttl name
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;k3&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;name3&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;name2&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;score&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;k1&quot;</span>
<span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">&quot;k2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="key的层级格式" tabindex="-1"><a class="header-anchor" href="#key的层级格式" aria-hidden="true">#</a> key的层级格式</h3><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-03-32.png" alt="redis_key"></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> jhw:user:1 <span class="token string">&#39;{&quot;id&quot;:1,&quot;name&quot;:&quot;Jack&quot;,&quot;age&quot; : 21}&#39;</span>

<span class="token builtin class-name">set</span> jhw:user:2 <span class="token string">&#39;{&quot;id&quot;:2,&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot; : 22}&#39;</span>

<span class="token builtin class-name">set</span> jhw:product:1 <span class="token string">&#39;{&quot;id&quot;:1,&quot;name&quot;:&quot;华为P60&quot;,&quot;price&quot;: 4999}&#39;</span>

<span class="token builtin class-name">set</span> jhw:product:2 <span class="token string">&#39;{&quot;id&quot;:2,&quot;name&quot;:&quot;华为Mate50&quot;,&quot;price&quot;: 5999}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-03-59.png" alt="redis_key_display"></p><h3 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> Hash</h3><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-04-24.png" alt="redis_hash"></p><p>Hash的常见命令有:</p><ul><li><code>HSET key field value</code>: 添加或者修改hash类型key的field的值</li><li><code>HGET key field</code>: 获取一个hash类型key的field的值</li><li><code>HMSET</code>:批量添加多个hash类型key的field的值</li><li><code>HMGET</code>: 批量获取多个hash类型key的field的值</li><li><code>HGETALL</code>:获取一个hash类型的key中的所有的field和value</li><li><code>HKEYS</code>:获取一个hash类型的key中的所有的field</li><li><code>HVALS</code>:获取一个hash类型的key中的所有的value</li><li><code>HINCRBY</code>:让一个hash类型key的字段值自增并指定步长</li><li><code>HSETNX</code>:添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-04-55.png" alt="redis_hash_display1"><br><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-05-53.png" alt="redis_hash_display2"></p><details class="custom-container details"><summary>命令演示</summary><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSET jhw:user:3 name Danny
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSET jhw:user:3 age <span class="token number">18</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HMSET jhw:user:4 name LiMing age <span class="token number">20</span> sex <span class="token function">man</span>
OK
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HMGET jhw:user:4 name age sex
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;LiMing&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HGETALL jhw:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;LiMing&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;sex&quot;</span>
<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HKEYS jhw:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;name&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;age&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;sex&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HVALS jhw:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;LiMing&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HINCRBY jhw:user:4 age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">22</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HINCRBY jhw:user:4 age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">24</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HINCRBY jhw:user:4 age <span class="token number">2</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">26</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HVALS jhw:user:4
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;LiMing&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;26&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;man&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSETNX jhw:user:4 sex woman
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HSETNX jhw:user:3 sex woman
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> HVALS jhw:user:3
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Danny&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;18&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;woman&quot;</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h3><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-06-33.png" alt="redis_list_question"><br><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-06-50.png" alt="redis_list"></p><p>List的常见命令有:</p><ul><li><code>LPUSH key element...</code>:向列表左侧插入一个或多个元素</li><li><code>RPUSH key element...</code>: 向列表右侧插入一个或多个元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-27-52.png" alt="redis_list_command1"></p><ul><li><code>LPOP key</code>: 移除并返回列表左侧的第一个元素，没有则返回nil</li><li><code>RPOP key</code>: 移除并返回列表右侧的第一个元素</li><li><code>LRANGE key star end</code>: 返回一段角标范围内的所有元素</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-28-46.png" alt="redis_list_command2"><br><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-29-05.png" alt="redis_list_command3"></p><ul><li><code>BLPOP和BRPOP</code>:与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-29-41.png" alt="redis_list_command4"><br><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-29-55.png" alt="redis_list_command5"></p><h3 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h3><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-30-33.png" alt="redis_set"></p><p>Set的常见命令有：</p><ul><li><code>SADD key member ... </code>:向set中添加一个或多个元素</li><li><code>SREM key member ...</code>:移除set中的指定元素</li><li><code>SCARD key</code>: 返回set中元素的个数</li><li><code>SISMEMBER key member</code>:判断一个元素是否存在于set中</li><li><code>SMEMBERS</code>:获取set中的所有元素</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SADD s1 a b c d
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SREM s1 a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER s1 a
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER s1 b
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCARD s1
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SMEMBERS s1
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;d&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;c&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;b&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>SINTER key1 key2...</code>:求key1与key2的交集</li><li><code>SDIFF key1 key2...</code>:key1与key2的差集</li><li><code>SUNION key1 key2..</code>:求key1和key2的并集</li></ul><p>Set命令的练习:</p><blockquote><p>将下列数据用Redis的Set集合来存储<br> 张三的好友有:李四、王五、赵六<br> 李四的好友有:王五、麻子、二狗</p></blockquote><ul><li>计算张三的好友有几人</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SCARD zhangsan
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>计算张三和李四有哪些共同好友</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SINTER zhangsan lisi
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询哪些人是张三的好友却不是李四的好友</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SDIFF zhangsan lisi
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhaoliu&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询张三和李四的好友总共有哪些人</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SUNION zhangsan lisi
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;wangwu&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;zhaoliu&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;lisi&quot;</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;mazi&quot;</span>
<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;ergou&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断李四是否是张三的好友</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER zhangsan lisi
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>判断张三是否是李四的好友</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SISMEMBER lisi zhangsan
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将李四从张三的好友列表中移除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> SREM zhangsan lisi
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sortedset" tabindex="-1"><a class="header-anchor" href="#sortedset" aria-hidden="true">#</a> SortedSet</h3><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-31-07.png" alt="redis_sortedset"></p><p>SortedSet的常见命令有:</p><ul><li><code>ZADD key score member</code>: 添加一个或多个元素到sorted set，如果已经存在则更新其score值</li><li><code>ZREM key member</code>: 删除sorted set中的一个指定元素</li><li><code>ZSCORE key member</code>:获取sorted set中的指定元素的score值</li><li><code>ZRANK key member</code>: 获取sorted set 中的指定元素的排名</li><li><code>ZCARD key</code>: 获取sorted set中的元素个数</li><li><code>ZCOUNT key min max</code>: 统计score值在给定范围内的所有元素的个数</li><li><code>ZINCRBY keyincrement member</code>: 让sorted set中的指定元素自增，步长为指定的increment值</li><li><code>ZRANGE key min max</code>: 按照score排序后，获取指定排名范围内的元素</li><li><code>ZRANGEBYSCORE key min max</code>: 按照score排序后，获取指定score范围内的元素</li><li><code>ZDIFF、ZINTER、ZUNION</code>: 求差集、交集、并集</li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可。</p></div><p>SortedSet命令练习</p><blockquote><p>将班级的下列学生得分存入Redis的SortedSet中:Jack 85, Lucy 89, Rose 82, Tom 95,Jerry 78, Amy 92, Miles 76</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZADD stus <span class="token number">85</span> Jack <span class="token number">89</span> Lucy <span class="token number">82</span> Rose <span class="token number">95</span> Tom <span class="token number">78</span> Jerry <span class="token number">92</span> Amy <span class="token number">76</span> Miles
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-31-29.png" alt="redis_sortedset_display"></p><p>并实现下列功能:</p><ul><li>删除Tom同学</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZREM stus Tom
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取Amy同学的分数</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZSCORE stus Amy
<span class="token string">&quot;92&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取Rose同学的排名</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANK stus Rose
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询80分以下有几个学生</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZCOUNT stus <span class="token number">0</span> <span class="token number">80</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>给Amy同学加2分</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZINCRBY stus <span class="token number">2</span> Amy
<span class="token string">&quot;94&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查出成绩前3名的同学</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 默认升序，查出来是倒数三名</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGE stus <span class="token number">0</span> <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Miles&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Jerry&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;Rose&quot;</span>
<span class="token comment"># 添加REV，降序排列</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZREVRANGE stus <span class="token number">0</span> <span class="token number">2</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Amy&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Lucy&quot;</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;Jack&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查出成绩80分以下的所有同学</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ZRANGEBYSCORE stus <span class="token number">0</span> <span class="token number">80</span>
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Miles&quot;</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Jerry&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis的java客户端-jedis" tabindex="-1"><a class="header-anchor" href="#redis的java客户端-jedis" aria-hidden="true">#</a> Redis的Java客户端-Jedis</h2><blockquote><p><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-32-04.png" alt="redis_java_desk"></p></blockquote><p>首先在idea中创建一个Maven项目(jedis-demo), 创建测试类。</p>`,81),E={href:"https://github.com/redis/jedis",target:"_blank",rel:"noopener noreferrer"},I=i(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token class-name">Jedis</span> <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>redis<span class="token punctuation">.</span>clients<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jedis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">4.4</span><span class="token number">.3</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>单元测试<span class="token operator">--</span><span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>junit<span class="token operator">-</span>jupiter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">&gt;</span></span><span class="token number">5.7</span><span class="token number">.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">&gt;</span>
        <span class="token generics"><span class="token punctuation">&lt;</span>scope<span class="token punctuation">&gt;</span></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>建立连接</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1. 建立连接</span>
        jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.126.129&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 设置密码</span>
        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. 选择库</span>
        jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>测试String和Hash</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 存入数据</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wjh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// result = OK</span>
    <span class="token comment">// 获取数据</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name = wjh</span>
<span class="token punctuation">}</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存入数据</span>
    jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Amy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;22&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name = Amy</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {name=Amy, age=22}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>释放资源</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AfterEach</span>
<span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 释放资源</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式。</p></div><p>创建一个Jedis的连接池工具类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisConnectionFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">JedisPool</span> jedisPool<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">// 配置连接池</span>
        <span class="token class-name">JedisPoolConfig</span> poolConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最大连接数</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最大空闲</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最小连接</span>
        poolConfig<span class="token punctuation">.</span><span class="token function">setMaxWaitMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最大等待时间</span>
        <span class="token comment">// 创建连接池对象</span>
        jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>poolConfig<span class="token punctuation">,</span>
                <span class="token string">&quot;192.168.126.130&quot;</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的测试类中的建立连接，就可以改为从连接池去获取一个连接</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 1. 建立连接</span>
<span class="token comment">//        jedis = new Jedis(&quot;192.168.126.129&quot;,6379);</span>
        <span class="token comment">// 2. 设置密码</span>
<span class="token comment">//        jedis.auth(&quot;123456&quot;);</span>
        <span class="token comment">// 从连接池获取连接</span>
        jedis <span class="token operator">=</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. 选择库</span>
        jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis的java客户端-springdataredis" tabindex="-1"><a class="header-anchor" href="#redis的java客户端-springdataredis" aria-hidden="true">#</a> Redis的Java客户端-SpringDataRedis</h2>`,13),N={href:"https://spring.io/projects/spring-data-redis",target:"_blank",rel:"noopener noreferrer"},J=i(`<ul><li>提供了对不同Redis客户端的整合 (Lettuce和Jedis)</li><li>提供了RedisTemplate统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><p>springDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中:</p><table><thead><tr><th style="text-align:center;">API</th><th style="text-align:center;">返回值类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">redisTemplate.opsForValue()</td><td style="text-align:center;">ValueOperations</td><td style="text-align:center;">操作string类型数据</td></tr><tr><td style="text-align:center;">redisTemplate.opsForHash()</td><td style="text-align:center;">HashOperations</td><td style="text-align:center;">操作Hash类型数据</td></tr><tr><td style="text-align:center;">redisTemplate.opsForList()</td><td style="text-align:center;">ListOperations</td><td style="text-align:center;">操作List类型数据</td></tr><tr><td style="text-align:center;">redisTemplate.opsForSet()</td><td style="text-align:center;">SetOperations</td><td style="text-align:center;">操作Set类型数据</td></tr><tr><td style="text-align:center;">redisTemplate.opsForZSet()</td><td style="text-align:center;">ZSetOperations</td><td style="text-align:center;">操作SortedSet类型数据</td></tr><tr><td style="text-align:center;">redisTemplate</td><td style="text-align:center;"></td><td style="text-align:center;">通用的命令</td></tr></tbody></table><h3 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h3><p>SpringBoot已经提供了对SpringDataRedis的支持，使用非常简单<br> 创建一个<code>Spring Initializr</code>项目(spring-data-redis-demo), 依赖可以勾选一个<code>Lombok</code>和<code>Spring Data Redis</code><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-36-14.png" alt="redis_springdataredis_project"></p><ol><li>引入依赖</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>redis依赖<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>commons<span class="token operator">-</span>pool <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>commons<span class="token operator">-</span>pool2<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>编写配置<code>application.yaml</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>spring<span class="token operator">:</span>
  redis<span class="token operator">:</span>
    host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token number">.126</span><span class="token number">.130</span>
    port<span class="token operator">:</span> <span class="token number">6379</span>
    password<span class="token operator">:</span> <span class="token number">123456</span>
    # spring默认使用的是lettuce<span class="token punctuation">,</span> 必须手动配置
    lettuce<span class="token operator">:</span>
      pool<span class="token operator">:</span>
        max<span class="token operator">-</span>active<span class="token operator">:</span> <span class="token number">8</span>  # 最大连接
        max<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">8</span>    # 最大空闲连接
        min<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">0</span>    # 最小空闲连接
        max<span class="token operator">-</span>wait<span class="token operator">:</span> <span class="token number">100</span>ms # 连接等待时间
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>注入RedisTemplate</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自动注入</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>编写测试</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">SpringDataRedisDemoApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自动注入</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 写入一条String数据</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取String数据</span>
        <span class="token class-name">Object</span> name <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name = Tom</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redistemplate序列化" tabindex="-1"><a class="header-anchor" href="#redistemplate序列化" aria-hidden="true">#</a> RedisTemplate序列化</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>RedisTemplate的两种序列化实践方案<br> 方案一:<br> 1.自定义RedisTemplate<br> 2.修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</p><p>方案二:<br> 1.使用StringRedisTemplate<br> 2.写入Redis时，手动把对象序列化为JSON<br> 3.读取Redis时，手动把读取到的JSON反序列化为对象</p></div><h4 id="自定义redistemplate" tabindex="-1"><a class="header-anchor" href="#自定义redistemplate" aria-hidden="true">#</a> 自定义RedisTemplate</h4><p>RedisTemplate可以接收任意0bject作为值写入Redis，只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的:<br><img src="https://cdn.jsdelivr.net/gh/wxhcoding/myblog-img/redis/redis_basic-2023-07-30-00-36-46.png" alt="redis_springdataredis_serialize"><br> 缺点:</p><ul><li>可读性差</li><li>内存占用较大</li></ul><div class="custom-container warning"><p class="custom-container-title">注意</p><p>Redis默认把存入的数据都存为了Java的对象, 而对对象的默认处理方式为JDK的序列化，默认把Java对象转化为了字节。<br> 解决：改变RedisTemplate的序列化方式.</p></div><p>创建一个<code>com.redis.config.RedisConfig</code>配置类，去更改默认的序列化方式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment">// 连接工厂不需要自己创建，SpringBoot会自动帮忙构建，只需要注入进来即可</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 创建RedisTemplate对象</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置连接工厂</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建Json序列化工具</span>
        <span class="token class-name">GenericJackson2JsonRedisSerializer</span> jsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置key的序列化</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置value的序列化</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 返回</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试类中更改注入的<code>RedisTemplate</code>形式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">注意</p><p><code>Caused by: java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/JsonProcessingException</code>发生错误，是因为没有引入相关的依赖，在pom文件中引入相关依赖。如果引入springmvc，会自动引入这个依赖。</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token class-name">Jackson</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>jackson<span class="token operator">-</span>databind<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现不再是序列化之后的结果，而是直接取到的字符串。<br> 下面再测试一下存入对象的话，是否能成功获取到。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 简单创建一个User对象(com.redis.pojo.User)</span>
<span class="token annotation punctuation">@Data</span>                <span class="token comment">// 生成get set 方法</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>   <span class="token comment">// 无参构造</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token comment">// 有参构造</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 编写测试类</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 写入数据</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:100&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;wjh&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取数据 强制转为User对象</span>
    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user = &quot;</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// user = User(name=wjh, age=22)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在RESP中显示的效果如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;@class&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.redis.pojo.User&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wjh&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">22</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用stringredistemplate" tabindex="-1"><a class="header-anchor" href="#使用stringredistemplate" aria-hidden="true">#</a> 使用StringRedisTemplate</h4><p>尽管JSON的序列化方式可以满足我们的需求，但依然存在一些问题，为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><p>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储lava对象时，手动完成对象的序列化和反序列化。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>Spring默认提供了一个StringRedisTemplate类，它的kev和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程</p></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 重新建一个测试类，使用StringRedisTemplate的方式</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">class</span> <span class="token class-name">RedisStringTests</span> <span class="token punctuation">{</span>
    <span class="token comment">// 自动注入</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>
    <span class="token comment">// Json工具 也可用其他</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 写入一条String数据</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;12345&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取String数据</span>
        <span class="token class-name">Object</span> name <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name = 12345</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 准备对象</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;wjh&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 手动序列化</span>
        <span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 写入一条数据</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:200&quot;</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取数据</span>
        <span class="token class-name">String</span> val <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:200&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 反序列化</span>
        <span class="token class-name">User</span> user1 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;user1 = &quot;</span> <span class="token operator">+</span> user1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// user1 = User(name=wjh, age=22)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 下面是对Hash的简单操作</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 存入数据</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user:400&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wjh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user:400&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;22&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> entries <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">&quot;user:400&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;entries = &quot;</span> <span class="token operator">+</span> entries<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// entries = {name=wjh, age=22}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在RESP中显示的效果如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;wjh&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">22</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function O(A,C){const e=o("router-link"),p=o("ExternalLinkIcon");return c(),r("div",null,[d,n("nav",k,[n("ul",null,[n("li",null,[a(e,{to:"#redis简单介绍"},{default:t(()=>[s("Redis简单介绍")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#特征"},{default:t(()=>[s("特征")]),_:1})])])]),n("li",null,[a(e,{to:"#redis安装"},{default:t(()=>[s("Redis安装")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#安装linux"},{default:t(()=>[s("安装Linux")]),_:1})]),n("li",null,[a(e,{to:"#安装依赖"},{default:t(()=>[s("安装依赖")]),_:1})]),n("li",null,[a(e,{to:"#配置启动"},{default:t(()=>[s("配置启动")]),_:1})]),n("li",null,[a(e,{to:"#开机自启"},{default:t(()=>[s("开机自启")]),_:1})])])]),n("li",null,[a(e,{to:"#redis命令"},{default:t(()=>[s("Redis命令")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#命令行"},{default:t(()=>[s("命令行")]),_:1})]),n("li",null,[a(e,{to:"#简单操作"},{default:t(()=>[s("简单操作")]),_:1})]),n("li",null,[a(e,{to:"#客户端"},{default:t(()=>[s("客户端")]),_:1})]),n("li",null,[a(e,{to:"#通用命令"},{default:t(()=>[s("通用命令")]),_:1})])])]),n("li",null,[a(e,{to:"#redis数据结构"},{default:t(()=>[s("Redis数据结构")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#string"},{default:t(()=>[s("String")]),_:1})]),n("li",null,[a(e,{to:"#key的层级格式"},{default:t(()=>[s("key的层级格式")]),_:1})]),n("li",null,[a(e,{to:"#hash"},{default:t(()=>[s("Hash")]),_:1})]),n("li",null,[a(e,{to:"#list"},{default:t(()=>[s("List")]),_:1})]),n("li",null,[a(e,{to:"#set"},{default:t(()=>[s("Set")]),_:1})]),n("li",null,[a(e,{to:"#sortedset"},{default:t(()=>[s("SortedSet")]),_:1})])])]),n("li",null,[a(e,{to:"#redis的java客户端-jedis"},{default:t(()=>[s("Redis的Java客户端-Jedis")]),_:1})]),n("li",null,[a(e,{to:"#redis的java客户端-springdataredis"},{default:t(()=>[s("Redis的Java客户端-SpringDataRedis")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#快速入门"},{default:t(()=>[s("快速入门")]),_:1})]),n("li",null,[a(e,{to:"#redistemplate序列化"},{default:t(()=>[s("RedisTemplate序列化")]),_:1})])])])])]),m,n("blockquote",null,[n("p",null,[n("a",v,[s("Linux之vi编辑器"),a(p)]),b,s(" 输入 i 开启插入编辑模式"),g,s(" 按 Esc 普通模式 普通模式下输入 / 进行查找 按n查找下一个"),h,s(" 普通模式下 :wq保存退出")])]),f,n("p",null,[s("下载 "),n("a",q,[s("RedisDesktopManager"),a(p)]),y,s(" 测试连接失败。可能没有开启防火墙的6379端口。")]),S,j,x,_,n("p",null,[s("Redis的官网查看 "),n("a",w,[s("命令"),a(p)]),s("，或者在命令行输入"),R,s("查看帮助。")]),T,n("ol",null,[n("li",null,[s("引入依赖---在 "),n("a",E,[s("Jedis"),a(p)]),s("官网中复制相关依赖")])]),I,n("p",null,[s("SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做 "),n("a",N,[s("SpringDataRedis"),a(p)])]),J])}const M=l(u,[["render",O],["__file","redis_basic.html.vue"]]);export{M as default};
