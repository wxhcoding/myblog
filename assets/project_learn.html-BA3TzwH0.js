import{_ as o,r as l,o as c,c as d,d as e,b as s,a as n,e as i}from"./app-1lTnJ-Z-.js";const r={},p=i('<h1 id="笔记" tabindex="-1"><a class="header-anchor" href="#笔记" aria-hidden="true">#</a> 笔记</h1><blockquote><p>该页面用来暂时记录在平时遇到的一些项目上的使用技巧</p></blockquote><h2 id="idea" tabindex="-1"><a class="header-anchor" href="#idea" aria-hidden="true">#</a> Idea</h2><h3 id="使用技巧" tabindex="-1"><a class="header-anchor" href="#使用技巧" aria-hidden="true">#</a> 使用技巧</h3><div class="custom-container tip"><p class="custom-container-title">提示sql语句的编写</p></div><ul><li>首先我们在idea中连接mysql数据库，并且把连接的数据库设置为默认的数据库，可以在连接时设置</li><li>然后在设置中把我们的sql dialects(方言) 改为 MySQL</li><li>如果这些还没有提示 检查一下xml文件的头部的https 若是https改为http即可</li></ul><div class="custom-container tip"><p class="custom-container-title">以不同端口号启动同一个服务</p></div><ul><li>在下方的service右键我们启动的服务 选择 <code>Copy Configuration..(Ctrl+D)</code></li><li>在 <code>Build and run</code> 中选择 <code>Modify options</code></li><li>选择 <code>Add VM options</code> 添加虚拟机</li><li>在输入框中 输入 <code>-Dserver.port=10101</code> 后面是我们自定义启动的端口号</li><li><code>-Dspring.cloud.nacos.discovery.cluster-name=BJ</code> 后面是我们自定义的集群的名字</li><li>这里面输入的是 yml 配置文件中 我们配置的前缀名</li><li>最上面的 name 输入框可以 输入我们要启动的服务的名字</li></ul><h3 id="设置" tabindex="-1"><a class="header-anchor" href="#设置" aria-hidden="true">#</a> 设置</h3>',9),u={href:"https://blog.csdn.net/qq_44866828/article/details/127751485",target:"_blank",rel:"noopener noreferrer"},m=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"这里的是全局的设置 New Projects SetUp => Settings for New Projects"),e("p",null,"创建文件头部信息 文件编码 Maven仓库设置 开启注解 自动导包")],-1),v=i(`<li>Editor =&gt; Includes =&gt; File Header<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span>  Wang Jiahao
 * <span class="token keyword">@date</span>  $<span class="token punctuation">{</span>DATE<span class="token punctuation">}</span> $<span class="token punctuation">{</span>TIME<span class="token punctuation">}</span>
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),h=e("li",null,"Editor => File Encodings => Global Encoding、Project Encoding、Default encoding for properties files(并勾上后面方框)",-1),k=e("li",null,"Build Tools => Maven",-1),b=e("li",null,"Compiler => Annotation Processors => 选择 Enable annotation processing",-1),g=e("li",null,"Other Settings => Auto Import => 选择Add unambiguous imports on the fly 和 Optimize imports on the fly",-1),y=e("h3",{id:"快捷键",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#快捷键","aria-hidden":"true"},"#"),s(" 快捷键")],-1),_={href:"https://zhuanlan.zhihu.com/p/410613271",target:"_blank",rel:"noopener noreferrer"},f=e("br",null,null,-1),x={href:"https://blog.csdn.net/qq_44866828/article/details/124297453",target:"_blank",rel:"noopener noreferrer"},q=i(`<h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 端口号</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> 这里写我们项目的端口号

<span class="token comment"># 给当前应用程序设置一个名称</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> 项目别名
  <span class="token comment"># 配置mysql数据库的连接信息</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> root
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>///数据库名
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
  <span class="token comment"># 配置redis的连接信息</span>
  <span class="token key atrule">data</span><span class="token punctuation">:</span>
    <span class="token key atrule">redis</span><span class="token punctuation">:</span>
      <span class="token key atrule">host</span><span class="token punctuation">:</span> redis的ip地址(虚拟机的ip地址)
      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>

<span class="token comment"># mybatis的配置</span>
<span class="token key atrule">mybatis</span><span class="token punctuation">:</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token comment"># 开启驼峰式映射</span>
    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token comment"># 输出sql语句</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
  <span class="token comment"># 指明我们的mapper文件</span>
  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mapper/<span class="token important">*.xml</span>
  <span class="token comment"># 给类起别名</span>
  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atcode.spzx.model.entity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller" aria-hidden="true">#</a> Controller</h2><div class="custom-container tip"><p class="custom-container-title">注解</p></div><ul><li>类上需要添加的注解: <ul><li><code>@RestController</code> 效果等价于 <code>@Controller+@ResponseBody</code></li><li><code>@RequestMapping</code> 提取这个类的请求路径前缀</li><li><code>@CrossOrigin </code> 前端请求后端解决跨域请求的问题</li><li><code>@Tag(name = &quot;&quot;)</code> 整合Swagger之后说明该模块的作用</li></ul></li><li>方法上需要添加的注解: <ul><li>针对不同的请求方式添加<code>@GetMapping</code> <code>@PostMapping</code> <code>@PutMapping</code> <code>@DeleteMapping</code></li><li>并且根据不用的传参方式在参数前添加注解 <code>@RequestBody</code> <code>@PathVariable</code> 等注解</li><li><code>@Operation(summary=&quot;&quot;)</code> 整个Swagger之后的接口说明</li></ul></li></ul><h2 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h2><div class="custom-container tip"><p class="custom-container-title">注解</p></div><ul><li>类上需要的注解: <ul><li><code>@Service</code></li><li><code>@Transactional</code> 为这个类下面的方法开启注解</li></ul></li><li>方法上需要的注解: <ul><li><code>@Transactional(readOnly = true)</code> 可以在查询方法上添加此注解 加快查询效率</li></ul></li></ul><div class="custom-container tip"><p class="custom-container-title">变量</p></div><ul><li>使用 <code>@Autowired</code> 或者 <code>@Resource</code> 引入放在IOC容器中的bean</li><li>使用<code>RedisTemplate</code>来操作redis</li></ul><h2 id="工具类" tabindex="-1"><a class="header-anchor" href="#工具类" aria-hidden="true">#</a> 工具类</h2><h3 id="hutool" tabindex="-1"><a class="header-anchor" href="#hutool" aria-hidden="true">#</a> hutool</h3><div class="custom-container tip"><p class="custom-container-title">使用\`StrUtil.isEmpty()\`判断字符串非空</p></div><div class="custom-container tip"><p class="custom-container-title">CaptchaUtil.createCircleCaptcha()</p><ul><li>这个方法是使用hutool里面的工具类生成一个图片验证码，其中可以设置图片的宽度高度，位数，以及干扰圈的个数</li><li>使用这个方法生成的对象可以获取到生成的验证码 比如<code>circleCaptcha.getCode()</code></li><li>可以获取到图片的base64编码 比如<code>circleCaptcha.getImageBase64()</code></li></ul></div><h3 id="fastjson" tabindex="-1"><a class="header-anchor" href="#fastjson" aria-hidden="true">#</a> fastjson</h3><div class="custom-container tip"><p class="custom-container-title">转换</p><ul><li>使用<code>JSONObject.toJSONString()</code>把对象转为json字符串</li><li>使用<code>JSONObject.parseObject()</code>把json字符串转为对象</li></ul></div><h3 id="java-util" tabindex="-1"><a class="header-anchor" href="#java-util" aria-hidden="true">#</a> java.util</h3><div class="custom-container tip"><p class="custom-container-title">使用\`UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;)\`生成随机UUID</p></div>`,18);function j(I,C){const t=l("ExternalLinkIcon"),a=l("Badge");return c(),d("div",null,[p,e("blockquote",null,[e("p",null,[e("a",u,[s("《IDEA 2023常用插件安装与全局配置教程大全》——提升你的开发效率"),n(t)])])]),m,e("ul",null,[e("li",null,[n(a,{type:"tip",text:"文件头部信息",vertical:"middle"})]),v,e("li",null,[n(a,{type:"tip",text:"编码",vertical:"middle"})]),h,e("li",null,[n(a,{type:"tip",text:"Maven仓库",vertical:"middle"})]),k,e("li",null,[n(a,{type:"tip",text:"开启lombok注解",vertical:"middle"})]),b,e("li",null,[n(a,{type:"tip",text:"自动导包",vertical:"middle"})]),g]),y,e("blockquote",null,[e("p",null,[e("a",_,[s("IDEA常用快捷键大全（建议收藏）"),n(t)]),f,e("a",x,[s("《IntelliJ IDEA 2023最新版快捷键大全：GIF动图演示，提升你的开发效率》"),n(t)])])]),q])}const E=o(r,[["render",j],["__file","project_learn.html.vue"]]);export{E as default};
